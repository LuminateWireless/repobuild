# Auto-generated by repobuild, do not modify directly.

# Environment flag settings.
ROOT_DIR := $(shell pwd)
# Some compiler specific flag settings.
CXX_GCC := $(shell echo $$($(CXX) --version | egrep '(gcc|g\+\+)' | head -n 1 | wc -l))
CC_GCC := $(shell echo $$($(CC) --version | egrep '(gcc|g\+\+|^cc)' | head -n 1 | wc -l))
ifeq ($(CC_GCC),1)
	CFLAGS= -pthread -g -Wall -Werror -Wno-sign-compare -Wno-unused-local-typedefs -Wno-error=unused-local-typedefs -O3 -flto
	BASIC_CFLAGS= -pthread
else
	CFLAGS= -stdlib=libc++ -pthread -g -Wall -Werror -Wno-sign-compare -O3 -flto -Qunused-arguments -fcolor-diagnostics
	BASIC_CFLAGS= -stdlib=libc++ -pthread -Qunused-arguments
endif
ifeq ($(CXX_GCC),1)
	LD_FORCE_LINK_START := -Wl,--whole-archive
	LD_FORCE_LINK_END := -Wl,--no-whole-archive
	LDFLAGS= -lpthread -g -O3 -flto -L/usr/local/lib -L/opt/local/lib
	CXXFLAGS= -pthread -g -Wall -Werror -Wno-sign-compare -Wno-unused-local-typedefs -Wno-error=unused-local-typedefs -O3 -flto -std=c++11 -DUSE_CXX0X
	BASIC_CXXFLAGS= -pthread -std=c++11
else
	LD_FORCE_LINK_START := -Wl,-force_load
	LD_FORCE_LINK_END := 
	LDFLAGS= -stdlib=libc++ -lpthread -g -O3 -flto -L/usr/local/lib -L/opt/local/lib
	CXXFLAGS= -stdlib=libc++ -pthread -g -Wall -Werror -Wno-sign-compare -O3 -flto -Qunused-arguments -fcolor-diagnostics -std=c++11 -DUSE_CXX0X
	BASIC_CXXFLAGS= -stdlib=libc++ -pthread -Qunused-arguments -std=c++11
endif

# Some platform specific flag settings.
IS_DARWIN := $(shell echo $$(uname | grep 'Darwin' | wc -l))
IS_DARWIN_AND_CLANG := $(shell echo $$((($(IS_DARWIN) == 1 && $(CXX_GCC) == 0))))
ifeq ($(IS_DARWIN_AND_CLANG),1)
	SHARED_LIB_ARGS_R:=awk '{print "-dynamiclib -current_version "$$4" -compatibility_version "$$5" -o "$$1"/lib"$$2"."$$3"."$$4"."$$5".dylib"}'
	SHARED_LIB_ARGS_MI:=awk '{print "-dynamiclib -current_version "$$4" -o "$$1"/lib"$$2"."$$3"."$$4".dylib"}'
	SHARED_LIB_ARGS_MA:=awk '{print "-dynamiclib -o "$$1"/lib"$$2"."$$3".dylib"}'
	SHARED_LIB_ARGS:=awk '{print "-dynamiclib -o "$$1"/lib"$$2".dylib"}'
	SHARED_LIB_NAME_R:=awk '{print "lib"$$1"."$$2"."$$3"."$$4".dylib"}'
	SHARED_LIB_NAME_MI:=awk '{print "lib"$$1"."$$2"."$$3".dylib"}'
	SHARED_LIB_NAME_MA:=awk '{print "lib"$$1"."$$2".dylib"}'
	SHARED_LIB_NAME:=awk '{print "lib"$$1".dylib"}'
else
	SHARED_LIB_ARGS_R:=awk '{print "-shared -Wl,-soname,lib"$$2".so."$$3" -o "$$1"/lib"$$2".so."$$3"."$$4"."$$5"}'
	SHARED_LIB_ARGS_MA:=awk '{print "-shared -Wl,-soname,lib"$$2".so."$$3" -o "$$1"/lib"$$2".so."$$3"."$$4}'
	SHARED_LIB_ARGS_MI:=awk '{print "-shared -Wl,-soname,lib"$$2".so."$$3" -o "$$1"/lib"$$2".so."$$3}'
	SHARED_LIB_ARGS:=awk '{print "-shared -Wl,-soname,lib"$$2".so -o "$$1"/lib"$$2".so"}'
	SHARED_LIB_NAME_R:=awk '{print "lib"$$1".so."$$2"."$$3"."$$4}'
	SHARED_LIB_NAME_MI:=awk '{print "lib"$$1".so."$$2"."$$3}'
	SHARED_LIB_NAME_MA:=awk '{print "lib"$$1".so."$$2}'
	SHARED_LIB_NAME:=awk '{print "lib"$$1".so"}'
endif
define PythonSetup
aW1wb3J0IG9zCmZyb20gc2V0dXB0b29scyBpbXBvcnQgc2V0dXAKCnNldHVwKAogICAgbmFtZSA9IG9zLmVudmlyb25bJ1BZX05BTUUnXSwKICAgIHZlcnNpb24gPSBvcy5lbnZpcm9uWydQWV9WRVJTSU9OJ10sCiAgICBweV9tb2R1bGVzID0gb3MuZW52aXJvblsnUFlfTU9EVUxFUyddLnNwbGl0KCksCiAgICBpbnN0YWxsX3JlcXVpcmVzID0gb3MuZW52aXJvblsnUFlfU1lTX0RFUFMnXS5zcGxpdCgpLAopCg==
endef
export PythonSetup

.gen-pkg/base_setup.py: .gen-files/.dummy.prereqs
	echo "$$PythonSetup" | base64 --decode > .gen-pkg/base_setup.py
	chmod 0755 .gen-pkg/base_setup.py

define CCEmbed
IyEvYmluL2Jhc2gKSEVBREVSPSIkMSIKQ1BQPSIkMiIKR1VBUkQ9IiQzIgpOQU1FU1BBQ0VfU1RBUlQ9IiQ0IgpOQU1FU1BBQ0VfRU5EPSIkNSIKZWNobyAiI2lmbmRlZiAkR1VBUkQiID4gJEhFQURFUgplY2hvICIjZGVmaW5lICRHVUFSRCIgPj4gJEhFQURFUgplY2hvICIjaW5jbHVkZSA8Y3N0cmluZz4gIC8vIHNpemVfdCIgPj4gJEhFQURFUgplY2hvICIkTkFNRVNQQUNFX1NUQVJUIiA+PiAkSEVBREVSCmVjaG8gIiNpbmNsdWRlIFwiJChiYXNlbmFtZSAkSEVBREVSKVwiIiA+ICRDUFAKZWNobyAiJE5BTUVTUEFDRV9TVEFSVCIgPj4gJENQUAp3aGlsZSByZWFkIFNPVVJDRSBWQVJJQUJMRTsgZG8gIGVjaG8gIi8vIEF1dG8gZ2VuZXJhdGVkIGZyb20gJFNPVVJDRSIgPj4gJEhFQURFUgogIGVjaG8gImV4dGVybiBjb25zdCBjaGFyKiAiJFZBUklBQkxFIl9kYXRhKCk7IiA+PiAkSEVBREVSCiAgZWNobyAiZXh0ZXJuIHNpemVfdCAiJFZBUklBQkxFIl9zaXplKCk7IiA+PiAkSEVBREVSCiAgZWNobyAiIiA+PiAkSEVBREVSCiAgZWNobyAiY29uc3QgY2hhciogIiRWQVJJQUJMRSJfZGF0YSgpIHsiID4+ICRDUFAKICBwcmludGYgIiAgcmV0dXJuIFwiIiA+PiAkQ1BQCiAgY2F0ICRTT1VSQ0UgICAgIHwgcGVybCAtcGUgJ3N8XFx8XFxcXHxnJyAgICAgfCBwZXJsIC1wZSAnc3xcInxcXCJ8ZycgICAgIHwgcGVybCAtcGUgJ3N8XG58XFxufGcnID4+ICRDUFAKICBlY2hvICJcIjsiID4+ICRDUFAKICBlY2hvICJ9IiA+PiAkQ1BQCiAgZWNobyAic2l6ZV90ICIkVkFSSUFCTEUiX3NpemUoKSIgeyA+PiAkQ1BQCiAgcHJpbnRmICIgIHJldHVybiAiID4+ICRDUFAKICBwcmludGYgJChjYXQgJFNPVVJDRSB8IHdjIC1jKSA+PiAkQ1BQCiAgZWNobyAiOyIgPj4gJENQUAogIGVjaG8gIn0iID4+ICRDUFAKZG9uZQplY2hvICIkTkFNRVNQQUNFX0VORCIgPj4gJEhFQURFUgplY2hvICIjZW5kaWYgIC8vICRHVUFSRCIgPj4gJEhFQURFUgplY2hvICIkTkFNRVNQQUNFX0VORCIgPj4gJENQUAo=
endef
export CCEmbed

.gen-files/cc_embed.sh: .gen-files/.dummy.prereqs
	echo "$$CCEmbed" | base64 --decode > .gen-files/cc_embed.sh
	chmod 0755 .gen-files/cc_embed.sh


.gen-src/testdata: .gen-files/.dummy.prereqs
	mkdir -p .gen-src; [ -d testdata ] || mkdir -p testdata; ln -f -s ../testdata .gen-src/testdata


.gen-src/testdata/.dummy: .gen-src/testdata .gen-files/.dummy.prereqs
	[ -f .gen-src/testdata/.dummy ] || touch .gen-src/testdata/.dummy


.gen-src/.gen-pkg/testdata: .gen-files/.dummy.prereqs
	mkdir -p .gen-src/.gen-pkg; [ -d .gen-pkg/testdata ] || mkdir -p .gen-pkg/testdata; ln -f -s ../../.gen-pkg/testdata .gen-src/.gen-pkg/testdata


.gen-src/.gen-pkg/testdata/.dummy: .gen-src/.gen-pkg/testdata .gen-files/.dummy.prereqs
	[ -f .gen-src/.gen-pkg/testdata/.dummy ] || touch .gen-src/.gen-pkg/testdata/.dummy


.gen-src/.gen-files/testdata: .gen-files/.dummy.prereqs
	mkdir -p .gen-src/.gen-files; [ -d .gen-files/testdata ] || mkdir -p .gen-files/testdata; ln -f -s ../../.gen-files/testdata .gen-src/.gen-files/testdata


.gen-src/.gen-files/testdata/.dummy: .gen-src/.gen-files/testdata .gen-files/.dummy.prereqs
	[ -f .gen-src/.gen-files/testdata/.dummy ] || touch .gen-src/.gen-files/testdata/.dummy

testdata/auto_.0: .gen-src/testdata .gen-src/.gen-pkg/testdata .gen-src/.gen-files/testdata

.PHONY: testdata/auto_.0


.gen-obj/testdata/a/bar.cc.o: .gen-src/testdata/.dummy .gen-src/.gen-files/testdata/.dummy .gen-src/.gen-pkg/testdata/.dummy testdata/a/bar.cc .gen-files/.dummy.prereqs
	mkdir -p .gen-obj/testdata/a
	echo "Compiling:  testdata/a/bar.cc (c++)"
	$(COMPILE.cc) -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files testdata/a/bar.cc -o .gen-obj/testdata/a/bar.cc.o

testdata/a/bar_pred_a: .gen-obj/testdata/a/bar.cc.o testdata/auto_.0

.PHONY: testdata/a/bar_pred_a


.gen-obj/testdata/b/bar.cc.o: .gen-src/testdata/.dummy .gen-src/.gen-files/testdata/.dummy .gen-src/.gen-pkg/testdata/.dummy testdata/b/bar.cc .gen-files/.dummy.prereqs
	mkdir -p .gen-obj/testdata/b
	echo "Compiling:  testdata/b/bar.cc (c++)"
	$(COMPILE.cc) -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files testdata/b/bar.cc -o .gen-obj/testdata/b/bar.cc.o

testdata/b/bar_pred_b: .gen-obj/testdata/b/bar.cc.o testdata/a/bar_pred_a testdata/auto_.0

.PHONY: testdata/b/bar_pred_b


.gen-files/testdata/bar_data.h: .gen-files/cc_embed.sh testdata/bar_data.txt testdata/bar_data2.txt .gen-files/.dummy.prereqs
	echo "Embed:      testdata/bar_data.1"
	mkdir -p .gen-files/testdata
	for f in "testdata/bar_data.txt embed_bar_data_txt" "testdata/bar_data2.txt embed_bar_data2_txt"; do  echo $$f;done | .gen-files/cc_embed.sh .gen-files/testdata/bar_data.h .gen-files/testdata/bar_data.cc TESTDATA_BAR_DATA_H "namespace testdata { namespace bar_data { " "} } "


.gen-files/testdata/bar_data.cc: .gen-files/testdata/bar_data.h .gen-files/.dummy.prereqs

testdata/bar_data.1: .gen-files/testdata/bar_data.cc .gen-files/testdata/bar_data.h testdata/auto_.0

.PHONY: testdata/bar_data.1

headers.testdata/bar_data.0 := .gen-files/testdata/bar_data.h


.gen-obj/testdata/bar_data.cc.o: .gen-src/testdata/.dummy .gen-src/.gen-files/testdata/.dummy .gen-src/.gen-pkg/testdata/.dummy .gen-files/testdata/bar_data.h .gen-files/testdata/bar_data.cc $(headers.testdata/bar_data.0) .gen-files/testdata/bar_data.cc .gen-files/.dummy.prereqs
	mkdir -p .gen-obj/testdata
	echo "Compiling:  .gen-files/testdata/bar_data.cc (c++)"
	$(COMPILE.cc) -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files .gen-files/testdata/bar_data.cc -o .gen-obj/testdata/bar_data.cc.o

testdata/bar_data.0: .gen-obj/testdata/bar_data.cc.o testdata/bar_data.1 testdata/auto_.0

.PHONY: testdata/bar_data.0

testdata/bar_data: testdata/bar_data.0 testdata/bar_data.1 testdata/auto_.0

.PHONY: testdata/bar_data

c_compile_args.testdata/bar := -O3

cxx_compile_args.testdata/bar := -O3

headers.testdata/bar := testdata/bar.h


.gen-obj/testdata/bar.cc.o: .gen-src/testdata/.dummy .gen-src/.gen-files/testdata/.dummy .gen-src/.gen-pkg/testdata/.dummy .gen-files/testdata/bar_data.h .gen-files/testdata/bar_data.cc $(headers.testdata/bar_data.0) $(headers.testdata/bar) testdata/bar.cc .gen-files/.dummy.prereqs
	mkdir -p .gen-obj/testdata
	echo "Compiling:  testdata/bar.cc (c++)"
	$(COMPILE.cc) -I. -I.gen-files -I.gen-src -I.gen-src/.gen-files $(cxx_compile_args.testdata/bar) testdata/bar.cc -o .gen-obj/testdata/bar.cc.o

testdata/bar: .gen-obj/testdata/bar.cc.o testdata/b/bar_pred_b testdata/bar_data testdata/auto_.0

.PHONY: testdata/bar

headers.testdata/bar_shared := testdata/bar.h


.gen-obj/testdata/libbar_shared.so.3.1.0: .gen-obj/testdata/a/bar.cc.o .gen-obj/testdata/b/bar.cc.o .gen-obj/testdata/bar_data.cc.o .gen-obj/testdata/bar.cc.o .gen-files/.dummy.prereqs
	echo "Linking:    .gen-obj/testdata/libbar_shared.so.3.1.0"
	mkdir -p .gen-obj/testdata
	$(LINK.cc) .gen-obj/testdata/bar.cc.o .gen-obj/testdata/bar_data.cc.o .gen-obj/testdata/b/bar.cc.o .gen-obj/testdata/a/bar.cc.o $$(printf '.gen-obj/testdata bar_shared 3 1 0' | $(SHARED_LIB_ARGS_R))
	ln -f -s $$(printf 'bar_shared 3 1 0' | $(SHARED_LIB_NAME_R)) .gen-obj/testdata/libbar_shared.so.3.1.0

testdata/bar_shared: .gen-obj/testdata/libbar_shared.so.3.1.0 testdata/bar testdata/auto_.0

.PHONY: testdata/bar_shared


clean: .gen-files/.dummy.prereqs
	rm -rf .gen-src/testdata/.dummy
	rm -rf .gen-src/.gen-files/testdata/.dummy
	rm -rf .gen-src/.gen-pkg/testdata/.dummy
	rm -rf .gen-obj
	rm -rf bin
	rm -rf .gen-files
	rm -rf .gen-src
	rm -rf .gen-pkg


all: testdata/bar_shared .gen-files/.dummy.prereqs


tests: .gen-files/.dummy.prereqs

.PHONY: clean all tests

.DEFAULT_GOAL=all


.gen-files/.dummy.prereqs: 
	mkdir -p .gen-files
	touch .gen-files/.dummy.prereqs

