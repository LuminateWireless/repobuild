# Auto-generated by repobuild, do not modify directly.

# Environment flag settings.
ROOT_DIR := $(shell pwd)
# Some compiler specific flag settings.
CXX_GCC := $(shell echo $$($(CXX) --version | egrep '(^gcc|^g\+\+)' | head -n 1 | wc -l))
CC_GCC := $(shell echo $$($(CC) --version | egrep '(^gcc|^g\+\+|^cc)' | head -n 1 | wc -l))
ifeq ($(CC_GCC),1)
	CFLAGS= -pthread -g -Wall -Werror -Wno-sign-compare -Wno-unused-local-typedefs -Wno-error=unused-local-typedefs -O3 -flto
	BASIC_CFLAGS= -pthread
else
	CFLAGS= -stdlib=libc++ -pthread -g -Wall -Werror -Wno-sign-compare -O3 -flto -Qunused-arguments -fcolor-diagnostics
	BASIC_CFLAGS= -stdlib=libc++ -pthread
endif
ifeq ($(CXX_GCC),1)
	LD_FORCE_LINK_START := -Wl,--whole-archive
	LD_FORCE_LINK_END := -Wl,--no-whole-archive
	LDFLAGS= -lpthread -g -O3 -flto -L/usr/local/lib -L/opt/local/lib
	CXXFLAGS= -pthread -g -Wall -Werror -Wno-sign-compare -Wno-unused-local-typedefs -Wno-error=unused-local-typedefs -O3 -flto -std=c++11 -DUSE_CXX0X
	BASIC_CXXFLAGS= -pthread -std=c++11
else
	LD_FORCE_LINK_START := -Wl,-force_load
	LD_FORCE_LINK_END := 
	LDFLAGS= -stdlib=libc++ -lpthread -g -O3 -flto -L/usr/local/lib -L/opt/local/lib
	CXXFLAGS= -stdlib=libc++ -pthread -g -Wall -Werror -Wno-sign-compare -O3 -flto -Qunused-arguments -fcolor-diagnostics -std=c++11 -DUSE_CXX0X
	BASIC_CXXFLAGS= -stdlib=libc++ -pthread -std=c++11
endif

define PythonSetup
import os
from setuptools import setup, find_packages

setup(
    name = os.environ['PY_NAME'],
    version = os.environ['PY_VERSION'],
    packages = find_packages(),
    scripts = os.environ['PY_SCRIPTS'].split(),
)

endef
export PythonSetup

.gen-files/base_setup.py: 
	echo "$$PythonSetup" > .gen-files/base_setup.py


.gen-src/testdata: 
	mkdir -p .gen-src; [ -f . ] || mkdir -p .; ln -f -s .. .gen-src/testdata


.gen-src/testdata/.dummy: .gen-src/testdata
	[ -f .gen-src/testdata/.dummy ] || touch .gen-src/testdata/.dummy

__auto_name_0: .gen-src/testdata

.PHONY: __auto_name_0


.gen-src/.gen-files/testdata: 
	mkdir -p .gen-src/.gen-files; [ -f .gen-files ] || mkdir -p .gen-files; ln -f -s ../../.gen-files .gen-src/.gen-files/testdata


.gen-src/.gen-files/testdata/.dummy: .gen-src/.gen-files/testdata
	[ -f .gen-src/.gen-files/testdata/.dummy ] || touch .gen-src/.gen-files/testdata/.dummy


fmt.py_main: test.py
	python -m py_compile test.py



.PHONY: fmt.py_main


.gen-obj/py_main.egg: .gen-src/.gen-files/testdata/.dummy .gen-src/testdata/.dummy fmt.py_main test.py .gen-files/base_setup.py
	echo python build: .gen-obj/py_main.egg
	mkdir -p .gen-obj
	PY_NAME="py_main" PY_VERSION=1.0 PY_SCRIPTS="test.py" python .gen-files/base_setup.py build --build-base=.gen-files/py_main.build bdist_egg --dist-dir=.gen-obj --bdist-dir=.gen-files/py_main.build
	eval 'cd .gen-obj ; ln -f -s py_main-*.egg py_main.egg '


.gen-obj/py_main: .gen-obj/py_main.egg
	echo 'python -m test $$($$(pwd)/$$(dirname $$0))/py_main.egg' > .gen-obj/py_main; chmod 755 .gen-obj/py_main

py_main.egg: .gen-obj/py_main.egg
	pwd > /dev/null
	ln -f -s .gen-obj/py_main.egg py_main.egg


py_main: .gen-obj/py_main
	pwd > /dev/null
	ln -f -s .gen-obj/py_main py_main


clean: 
	rm -rf .gen-src/testdata/.dummy
	rm -rf .gen-src/.gen-src/testdata/testdata
	rm -rf .gen-src/.gen-files/testdata/.dummy
	rm -rf .gen-src/.gen-files/testdata
	rm -f py_main
	rm -f py_main.egg
	rm -rf .gen-obj
	rm -rf .gen-files
	rm -rf .gen-src


all: py_main py_main.egg


.PHONY: clean all

.DEFAULT_GOAL=all

